#!/bin/bash
source /etc/profile.d/jetson-vars.sh

showUsage() {
    echo " "
    echo "skyhub <action> [params]"
    echo "    Use this utility to manage the skyhub installation"
    echo " "
    echo "    actions:"
    echo " "
    echo "      prune         - Prunes the docker system removing excess space"
    echo "      start         - Starts the tracker docker containers"
    echo "      stop          - Stops the tracker docker containers"
    echo "      restart       - Stop and restarts the tracker"
    echo "      update        - Update the tracker docker images and containers"
    echo "      upgrade       - Reruns the skyhub installer"
    echo "      status        - Lists the running containers"
    echo "      monitor       - Monitors the skyhub-tracker logs"
    echo "      mysql         - Opens a connection to mysql"
    #echo "      reset         - Resets the tracker config and removes the old database (does not delete videos)"
    echo "      resetdb       - Resets the mysql database"
    echo "      resetconfig   - Resets the track configuration (You will have to rerun the setup wizard)"
    echo "      help          - Shows this help"
    echo " "
    echo " "
}

if [ "$1" = "help" ]; then
    showUsage
    exit
fi

startSkyhub() {
    echo "Starting skyhub docker containers"

    echo "Creating skyhub network"
    [ ! "$(sudo docker network ls | grep skyhub-network)" ] && sudo docker network create -d bridge --subnet 192.168.42.0/24 --gateway 192.168.42.1 skyhub-network

    echo "Starting mysql"
    if [ ! "$(sudo docker ps | grep skyhub-mysql$)" ]; then
        docker run -d --name skyhub-mysql \
            --mount type=bind,src=/skyhub/storage/mariadb,dst=/var/lib/mysql \
            --restart unless-stopped \
            --network skyhub-network \
            --env MYSQL_DATABASE=skyhub \
            --env MYSQL_USER=skyhub \
            --env MYSQL_PASSWORD=3fSS34f03lls \
            --env MYSQL_ROOT_PASSWORD=byMp3nTXpaKeB7Vz \
            arm64v8/mariadb:10.1
    fi

    echo "Starting tracker-controller"
    if [ ! "$(sudo docker ps | grep skyhub-tracker-controller$)" ]; then
        sudo docker run -d \
            --name skyhub-tracker-controller --network skyhub-network \
            --privileged --restart unless-stopped \
            --env "db-connect-string=skyhub:3fSS34f03lls@tcp(skyhub-mysql:3306)/skyhub?charset=utf8mb4&parseTime=True&loc=Local" \
            -v /skyhub/storage/data:/skyhub/data -v /skyhub/storage/etc:/skyhub/etc \
            -v /skyhub/storage/db:/skyhub/db -v /skyhub/skyhub.pipe:/tmp/skyhub.pipe \
            -v /skyhub/storage/certs:/var/certs \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -p 8080:8080 -p 9090:8088 -p 3000:3000 \
            --log-opt max-size=10m --log-opt max-file=5 \
            skyhuborg/tracker-controller:{{ git_branch }}
    fi

    echo "Starting tracker"
    if [ ! "$(sudo docker ps | grep skyhub-tracker$)" ]; then
        sudo docker run -d \
            --runtime nvidia --name skyhub-tracker \
            --gpus all --network skyhub-network --privileged \
            --restart unless-stopped \
            --device /dev/video0:/dev/video0 --device /dev/video1:/dev/video1 \
            --device /dev/$(readlink /dev/hwt901b):/dev/$(readlink /dev/hwt901b) \
            --env device-path-witmotion=/dev/$(readlink /dev/hwt901b) \
            --env profile:0 \
            --env controller-trackerd-server-addr=skyhub-tracker-controller:8089 \
            --env gpsd-addr=skyhub-gpsd:2947 \
            --env upload-server-addr={{ upload_server_addr }} \
            --env trackerd-server-addr={{ trackerd_server_addr }} \
            --env auto-tls-server-name={{ trackerd_auto_tls_name }} \
            --env auto-tls=true \
            --env dnn-model-path=/skyhub/models \
            --env JETSON_MODULE=${JETSON_MODULE} \
            --env "db-connect-string=skyhub:3fSS34f03lls@tcp(skyhub-mysql:3306)/skyhub?charset=utf8mb4&parseTime=True&loc=Local" \
            -v /skyhub/storage/data:/skyhub/data -v /skyhub/storage/etc:/skyhub/etc \
            -v /skyhub/skyhub.pipe:/tmp/skyhub.pipe -v /skyhub/storage/certs:/var/certs \
            --log-opt max-size=10m --log-opt max-file=5 \
            skyhuborg/tracker:{{ git_branch }}
    fi

    echo "Starting tracker-ui"
    if [ ! "$(sudo docker ps | grep skyhub-tracker-ui$)" ]; then
        sudo docker run -d \
            --name skyhub-tracker-ui --network skyhub-network --privileged \
            -v /skyhub/storage/certs:/var/certs \
            --restart unless-stopped -p 80:80 -p 443:443 \
            --log-opt max-size=10m --log-opt max-file=5 \
            skyhuborg/tracker-ui:{{ git_branch }}
    fi
}

stopSkyhub() {
    echo "Stopping skyhub docker containers"

    echo  "Removing mysql"
    [ "$(sudo docker ps -a | grep skyhub-mysql$)" ] && sudo docker stop skyhub-mysql && sudo docker rm -f skyhub-mysql || true

    echo "Removing tracker"
    [ "$(sudo docker ps -a | grep skyhub-tracker$)" ] && sudo docker rm -f skyhub-tracker || true

    echo "Removing tracker-controller"
    [ "$(sudo docker ps -a | grep skyhub-tracker-controller$)" ] && sudo docker rm -f skyhub-tracker-controller || true

    echo "Removing tracker-ui"
    [ "$(sudo docker ps -a | grep skyhub-tracker-ui$)" ] && sudo docker rm -f skyhub-tracker-ui || true

    echo "Removing skyhub-network"
    [ "$(sudo docker network ls | grep skyhub_skyhub-network)" ] && sudo docker network rm skyhub_skyhub-network || true
    [ "$(sudo docker network ls | grep skyhub-network)" ] && sudo docker network rm skyhub-network || true

}

resetSkyHub() {
    echo -n "Are you sure you want to do this? Enter 'Y' then press enter to proceed"
    echo " "
    read character
    if [ "$character" = "Y" ]; then
        stopSkyhub
        resetSkyHubConfig
        resetSkyHubDB
        startSkyhub
    else
        echo "Okay good, glad I asked."
    fi
}

resetSkyHubDB() {
    echo -n "Are you sure you want to do this? Enter 'Y' then press enter to proceed"
    echo " "
    read character
    if [ "$character" = "Y" ]; then
        stopSkyhub
        sudo rm -rf /skyhub/storage/db/*
        sudo rm -rf /skyhub/storage/mysql/*
        sudo rm -rf /skyhub/storage/mariadb/*
        startSkyhub
    else
        echo "Okay good, glad I asked."
    fi
}


resetSkyHubConfig() {
    echo -n "Are you sure you want to do this? Enter 'Y' then press enter to proceed"
    echo " "
    read character
    if [ "$character" = "Y" ]; then
        stopSkyhub
        truncate -s 0 /skyhub/storage/etc/tracker.yml
        startSkyhub
    else
        echo "Okay good, glad I asked."
    fi
}

updateSkyHub() {
    stopSkyhub

    echo "Updating tracker"
    docker pull skyhuborg/tracker:{{ git_branch }}

    echo "Updating tracker-controller"
    docker pull skyhuborg/tracker-controller:{{ git_branch }}

    echo "Updating tracker-ui"
    docker pull skyhuborg/tracker-ui:{{ git_branch }}

    startSkyhub

    docker system prune -f

}

if [ "$1" = "prune" ]; then
    docker system prune -f
    exit
elif [ "$1" = "status" ]; then
    echo "Listing docker containers";
    docker ps
    exit
elif [ "$1" = "monitor" ]; then
    echo "Viewing the docker logs for skyhub-tracker <ctrl>+c to exit";
    docker logs -f skyhub-tracker
elif [ "$1" = "start" ]; then
    startSkyhub
elif [ "$1" = "stop" ]; then
    stopSkyhub
elif [ "$1" = "mysql" ]; then
    docker exec -it skyhub-mysql mysql -u skyhub -p3fSS34f03lls
elif [ "$1" = "restart" ]; then
    stopSkyhub
    startSkyhub
elif [ "$1" = "update" ]; then
    updateSkyHub
elif [ "$1" = "upgrade" ]; then
    bash -c 'sudo wget --no-cache "https://gitlab.com/skyhuborg/ansible-tracker/-/raw/{{ git_branch }}/install" -O "install" -o /dev/null && sudo chmod u+x ./install && sudo bash -c "source ./install {{ tracker_env }}"'
# elif [ "$1" = "reset" ]; then    
#     resetSkyHub
elif [ "$1" = "resetdb" ]; then    
    resetSkyHubDB
elif [ "$1" = "resetconfig" ]; then    
    resetSkyHubConfig
elif [ "$1" = "help" ]; then    
    showUsage    
else
    showUsage 
fi
