- hostname:
    name: skyhub-tracker

- name: Initialized storage_configured variable
  set_fact:
    storage_configured: false

- name: Initialized needs_cleanup variable
  set_fact:
    needs_cleanup: false

- name: Checking existing installation
  stat:
    path: /skyhub/skyhub
  register: needs_cleanup_result

- name: Initialized storage_configured variable
  set_fact:
    needs_cleanup: true
  when: needs_cleanup_result.stat.exists == true

- name: Discover existing Sky Hub Storage
  set_fact:
    storage_configured: true
  when: 
    - '"SKYHUB_STORAGE" in item.value.links.labels'
  with_dict: "{{ ansible_devices }}"

- name: Print disk result
  set_fact:
    storage_disk: "/dev/{{item.key}}"
  when:
   - item.key is search ("sd") or item.key is search("nvme")
   - storage_configured != true
  with_dict: "{{ ansible_devices }}"

- name: Install jmespath python package
  pip:
    name: jmespath

- name: Storage disk initialization confirmation
  pause:
    prompt: "Setup storage disk {{ storage_disk }}. WARNING: The disk will be formatted, would you like to continue? y/n"
    echo: yes
  register: disk_confirmation
  when: storage_configured != true

- name: Storage configuration accepted
  block:
  - name: Create list of mounted devices
    set_fact:
      mounted_devices: "{{ ansible_mounts|json_query('[].device') }}"

  - name: Get mounted path for {{ storage_disk }}
    set_fact:
      storage_mount: "{{ item.mount }}"
    with_items: "{{ ansible_mounts }}"
    when: item.device == storage_disk

  - name: Stop service docker, if started
    service:
      name: docker
      state: stopped

  - name: Unmount {{ storage_disk }} from {{ storage_mount }}
    ansible.posix.mount:
      path: '{{ storage_mount }}'
      state: unmounted
    when: storage_disk in mounted_devices    

  - name: Loading attached storage device information
    community.general.parted: device={{ storage_disk }} unit=MiB
    register: storage_info

  - name: Remove all partitions from disk
    community.general.parted:
      device: '{{ storage_disk }}'
      number: '{{ item.num }}'
      state: absent
    loop: '{{ storage_info.partitions }}'

  - name: Setting up Sky Hub Storage Device
    community.general.parted:
      device: '{{ storage_disk }}'
      number: 1
      state: present
      fs_type: ext4
      label: gpt

  - name: Formatting Sky Hub Storage Filesystem
    community.general.filesystem:
      fstype: ext4
      dev: '{{ storage_disk }}'
      opts: -L SKYHUB_STORAGE

  - name: Mounting Sky Hub Storage device
    ansible.posix.mount:
      path: /skyhub/storage
      src: LABEL=SKYHUB_STORAGE
      fstype: ext4
      state: mounted
  when: 
    - storage_configured != true and disk_confirmation.user_input == "y"

#- name: Upgrade packages
#  apt:
#    upgrade: dist
#    update_cache: yes
#    autoremove: yes
#    autoclean: yes

# - name: Remove packages
#  apt:
#    name: "{{ item }}"
#  loop:
#    - systemd-timesyncd

- name: Install packages
  apt:
    autoremove: yes
    autoclean: yes
    update_cache: yes
    pkg:
      - docker.io=19.03.6-0ubuntu1~18.04.1
      - python-pip=9.0.1-2.3~ubuntu1.18.04.2
      - avahi-daemon=0.7-3.1ubuntu1.2
      - git=1:2.17.1-1ubuntu0.7
      - nvidia-container-csv-cuda=10.2.89-1
      - nvidia-container-csv-cudnn=8.0.0.180-1+cuda10.2
      - nvidia-container-csv-tensorrt=7.1.3.0-1+cuda10.2
      - nvidia-container-csv-visionworks=1.6.0.501
      - deepstream-5.0=5.0.0-1
      - gpsd
      - gpsd-clients
      - chrony

- name: Include gpsd modifications
  include: gpsd.yml

- pip:
    name: jetson-stats

- name: Creating Sky Hub User
  user:
    name: skyhub
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    shell: /bin/bash
    password: "{{ 'skyhub123' | password_hash('sha512') }}"
    groups: docker,sudo
    update_password: on_create

- name: Adding Sky Hub user to sudoers
  lineinfile:
    path: /etc/sudoers
    state: present
    line: "skyhub ALL=(ALL) NOPASSWD:/bin/skyhub"

- name: Create directories for Tracker
  file:
    path: "{{ item }}"
    state: directory
    owner: skyhub
    group: skyhub
    mode: 0755
  loop:
    - /skyhub
    - /skyhub/storage
    - /skyhub/storage/certs
    - /skyhub/storage/docker

- name: Create directories for Mysql
  file:
    path: "{{ item }}"
    state: directory
    owner: 'skyhub'
    group: 'skyhub'
    mode: 0777
  loop:
    - /skyhub/storage/mariadb

- name: Configuring udev rules
  copy:
    src: "{{ item }}"
    dest: /etc/udev/rules.d/
  loop:
    - ./files/etc/udev/rules.d/99-skyhub-device.rules

- name: Reloading udev rules
  shell:
    cmd: udevadm control --reload-rules && udevadm trigger

- name: Installing service definitions
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    mode: 644
  loop:
    - ./files/etc/systemd/system/skyhub-pipe.service
    - ./files/etc/systemd/system/skyhub-startup.service

- name: Installing Sky Hub files
  copy:
    src: "{{ item }}"
    dest: /bin/
    mode: '0555'
  loop:
    - ./files/bin/skyhub-pipe
    - ./files/bin/skyhub-startup
    - ./files/bin/skyhub

- name: Configuring Docker with NVIDIA Runtime
  copy:
    src: "{{ item }}"
    dest: /etc/docker/
    mode: 755
  loop:
    - ./files/etc/docker/daemon.json
  
- name: Disable services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  become: true
  loop: 
    - apport
    - kerneloops
    - ModemManager
    - snapd
    - whoopsie
    - wpa_supplicant
    - chrony # adding here to see if stop and staring will fix the gpsd

- name: Enable services
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  become: true
  loop:
    - gpsd
    - chrony
    - avahi-daemon
    - ssh
    - docker
    - skyhub-pipe
    - skyhub-startup

- name: get default runlevel
  command: systemctl get-default
  register: runlevel

- name: Set graphical runlevel
  command: systemctl set-default multi-user.target
  when: runlevel.stdout != "multi-user.target"

- name: Copying openssl config file
  copy:
    src: "{{ item }}"
    dest: /skyhub/storage/certs
    mode: 0666
  loop:
    - ./files/openssl.cnf

- name: Stat service.pem cert
  stat:
    path: /skyhub/storage/certs/service.pem
  register: cert_result

- name: Generate Sky Hub certificates
  shell: |
    openssl genrsa -out /skyhub/storage/certs/ca.key 4096
    openssl req -new -x509 -key /skyhub/storage/certs/ca.key -sha256 -batch -config /skyhub/storage/certs/openssl.cnf -days 1825 -out /skyhub/storage/certs/ca.cert
    openssl genrsa -out /skyhub/storage/certs/service.key 4096
    openssl req -new -key /skyhub/storage/certs/service.key -batch -config /skyhub/storage/certs/openssl.cnf -out /skyhub/storage/certs/service.csr 
    openssl x509 -req -in /skyhub/storage/certs/service.csr -CA /skyhub/storage/certs/ca.cert -CAkey /skyhub/storage/certs/ca.key -CAcreateserial -out /skyhub/storage/certs/service.pem -days 1825 -sha256 -extfile /skyhub/storage/certs/openssl.cnf -extensions v3_ca
    exit 0
  args:
    executable: /bin/bash
  when: cert_result.stat.exists == false    

- name: Blacklist kernel modules
  kernel_blacklist:
    name: "{{ item }}"
    state: present
  loop:
    - bluedroid_pm

- name: Include cleanup code for old installs
  include: cleanup.yml
  when: needs_cleanup == true
