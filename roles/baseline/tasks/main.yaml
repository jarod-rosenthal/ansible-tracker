- hostname:
    name: skyhub-tracker

- name: Print disk result
  set_fact:
    storage_disk: "/dev/{{item.key}}"
  when:
   - item.key is search ("sd") or item.key is search("nvme")
  with_dict: "{{ ansible_devices }}"

- name: Storage disk initialization confirmation
  pause:
    prompt: "Installer will format {{ storage_disk }}. Would you like to continue? y/n"
    echo: yes
  register: disk_confirmation

- name: test
  fail: 
    msg: Sky Hub cannot be installed without a storage disk.
  when: disk_confirmation.user_input != "y"

#- name: Unmounting storage device
#shell: "umount {{ storage_disk }}"

- name: Loading attached storage device information
  community.general.parted: device={{ storage_disk }} unit=MiB
  register: storage_info

- name: Remove all partitions from disk
  community.general.parted:
    device: '{{ storage_disk }}'
    number: '{{ item.num }}'
    state: absent
  loop: '{{ storage_info.partitions }}'

- name: Setting up Sky Hub Storage Device
  community.general.parted:
    device: '{{ storage_disk }}'
    number: 1
    state: present
    fs_type: ext4
    label: gpt
    name: SKYHUB_STORAGE

- name: Mounting Sky Hub Storage device
  ansible.posix.mount:
    path: /skyhub/storage
    src: LABEL=SKYHUB_STORAGE
    fstype: ext4
    state: present


#- name: Upgrade packages
#  apt:
#    upgrade: dist
#    update_cache: yes
#    autoremove: yes
#    autoclean: yes

# - name: Remove packages
#  apt:
#    name: "{{ item }}"
#  loop:
#    - systemd-timesyncd

- name: Install packages
  apt:
    name: "{{ item }}"
    autoremove: yes
    autoclean: yes
    update_cache: yes
  with_items:
    - docker.io=19.03.6-0ubuntu1~18.04.1
    - python-pip=9.0.1-2.3~ubuntu1.18.04.2
    - avahi-daemon=0.7-3.1ubuntu1.2
    - git=1:2.17.1-1ubuntu0.7
    - nvidia-container-csv-cuda=10.2.89-1
    - nvidia-container-csv-cudnn=8.0.0.180-1+cuda10.2
    - nvidia-container-csv-tensorrt=7.1.3.0-1+cuda10.2
    - nvidia-container-csv-visionworks=1.6.0.501
    - deepstream-5.0=5.0.0-1
    - gpsd
    - gpsd-clients
    - chrony

- name: Sync system time with GPS Receiver
  lineinfile:
    path: /etc/chrony/chrony.conf
    state: present
    line: "{{ item }}"
  loop:
    - refclock SHM 0 refid GPS precision 1e-1 offset 0.9999 delay 0.2
    - refclock SHM 1 refid PPS precision 1e-7

- pip:
    name: jetson-stats

- name: Creating Sky Hub User
  user:
    name: skyhub
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    shell: /bin/bash
    password: skyhub123
    groups: docker

- name: Adding Sky Hub user to sudoers
  lineinfile:
    path: /etc/sudoers
    state: present
    line: "skyhub ALL=(ALL) NOPASSWD:/skyhub/skyhub"

- name: Create directories for Tracker
  file:
    path: "{{ item }}"
    state: directory
    owner: skyhub
    group: skyhub
    mode: 0755
  loop:
    - /skyhub
    - /skyhub/storage
    - /skyhub/storage/mysql
    - /skyhub/storage/certs
    - /skyhub/docker

- name: Cloning get-started repository
  git:
    repo: https://gitlab.com/skyhuborg/get-started.git
    dest: ~/get-started
    update: yes

- name: Copying Sky Hub CLI
  copy:
    src: ~/get-started/deploy/
    dest: /skyhub

- name: Configuring udev rules
  copy:
    src: "{{ item }}"
    dest: /etc/udev/rules.d/
  loop:
    - ./files/etc/udev/rules.d/99-skyhub-device.rules

- name: Reloading udev rules
  shell:
    cmd: udevadm control --reload-rules && udevadm trigger

- name: Installing service definitions
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    mode: 644
  loop:
    - ./files/etc/systemd/system/skyhub-pipe.service
    - ./files/etc/systemd/system/skyhub-clocks.service

- name: Installing clock service
  copy:
    src: "{{ item }}"
    dest: /skyhub/
    mode: u+rwx
  loop:
    - ./files/skyhub/clock.sh

- name: Installing Sky Hub pipe
  copy:
    src: "{{ item }}"
    dest: /skyhub/
    mode: 666
  loop:
    - ./files/skyhub/skyhub-pipe

- name: Reloading systemctl daemon
  systemd:
    daemon_reload: yes


- name: Configuring Docker with NVIDIA Runtime
  copy:
    src: "{{ item }}"
    dest: /etc/docker/
    mode: 755
  loop:
    - ./files/etc/docker/daemon.json
  
- name: Enable services
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  become: true
  loop:
    - gpsd
    - avahi-daemon
    - ssh
    - docker
    - skyhub-pipe
    - skyhub-clocks

- name: get default runlevel
  command: systemctl get-default
  register: runlevel

- name: Set graphical runlevel
  command: systemctl set-default multi-user.target
  when: runlevel.stdout != "multi-user.target"

#- name: Generate Sky Hub certificates
#  shell: |
#    openssl genrsa -out /skyhub/storage/certs/ca.key 4096
#    openssl req -new -x509 -key /skyhub/storage/certs/ca.key -sha256 -batch -config ./files/openssl.cnf -days 1825 -out /skyhub/storage/certs/ca.cert
#    openssl genrsa -out /skyhub/storage/certs/service.key 4096
#    openssl req -new -key /skyhub/storage/certs/service.key -batch -config ./files/openssl.cnf -out /skyhub/storage/certs/service.csr 
#    openssl x509 -req -in /skyhub/storage/certs/service.csr -CA /skyhub/storage/certs/ca.cert -CAkey /skyhub/storage/certs/ca.key -CAcreateserial -out /skyhub/storage/certs/service.pem -days 1825 -sha256 -extfile ./files/openssl.cnf -extensions v3_ca
#    exit 0a
#  args:
#    executable: /bin/bash

- name: Blacklist kernel modules
  kernel_blacklist:
    name: "{{ item }}"
    state: present
  loop:
    - bluedroid_pm

